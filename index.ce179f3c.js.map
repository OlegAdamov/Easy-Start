{"mappings":"gfAAAA,EAAA,S,ICkBAC,EAAe,C,KAlBF,CAACC,EAAKC,KACjB,IACE,MAAMC,EAAkBC,KAAKC,UAAUH,GACvCI,aAAaC,QAAQN,EAAKE,E,CAC1B,MAAOK,GACPC,QAAQD,MAAM,oBAAqBA,EAAME,Q,QAIhCT,IACX,IACE,MAAME,EAAkBG,aAAaK,QAAQV,GAC7C,OAA2B,OAApBE,OAA2BS,EAAYR,KAAKS,MAAMV,E,CACzD,MAAOK,GACPC,QAAQD,MAAM,oBAAqBA,EAAME,Q,iBDV7C,MACMI,EAAO,CACXC,WAAYC,SAASC,cAAc,YAEnCC,SAAUF,SAASC,cAAc,oBACjCE,SAAUH,SAASC,cAAc,aACjCG,eAAgBJ,SAASC,cAAc,qBAEzCH,EAAKC,WAAWM,iBAAiB,SASjC,SAAwBC,GACtBA,EAAEC,iBACF,MAAMC,EAAcF,EAAEG,OAAOC,QAAQ,kBACrC,IAAKF,EACH,OAEFV,EAAKC,WAAWM,iBAAiB,WAAWC,IAC5B,WAAVA,EAAErB,KACJa,EAAKK,SAASQ,UAAUC,IAAI,YAAY,IA4C3BC,EAzCPL,EAAYM,GAiCxBC,eAAyBC,GACvB,MAAMC,QAAiBC,MACrB,sCAAsCF,6DAGxC,aAD8BC,EAASE,M,CAKvCC,CAAUP,GAAOQ,MAAKC,IACpBxB,EAAKM,eAAemB,UAAY,kBACrBC,uEACgCF,EAAKG,qBAAqBH,EAAKI,SAASJ,EAAKK,2FAGhEL,EAAKI,6WASMJ,EAAKM,gDACfN,EAAKO,8CACLP,EAAKQ,kDACLC,4GAIGT,EAAKU,yCAGjCR,EAAKF,EAAKR,GACVmB,EAAQX,EAAKI,MACbQ,EAAOZ,EAAKM,aACZO,EAAcb,EAAKG,YACnB,MAAMW,EAAS,GACfd,EAAKc,OAAOC,SAAQC,IAClBF,EAAOG,KAAKD,EAAGX,KAAK,IAEtBI,EAAaK,EAAOI,KAAK,MACzBC,EAAenB,EAAKoB,aAAaC,MAAM,KAAK,EAAE,IAGhD7C,EAAKK,SAASQ,UAAUiC,OAAO,aAtCjC,IAAmB/B,C,IA3DnB,IAAIoB,EAAQ,KACRE,EAAc,KACdM,EAAe,KACfV,EAAa,KACbG,EAAO,KACPV,EAAK,KA+FTqB,OAAOxC,iBAAiB,SAASC,IAC3BA,EAAEG,SAAWX,EAAKK,UACpBL,EAAKK,SAASQ,UAAUC,IAAI,YAAY,IAI5Cd,EAAKI,SAASG,iBAAiB,SAAS,KACtCP,EAAKK,SAASQ,UAAUC,IAAI,YAAY,IAG1C,MAAMkC,EAAa9C,SAASC,cAAc,iBACpC8C,EAAY/C,SAASC,cAAc,iBAKnC+C,EAAc,qBACdC,EAAa,oBAEnBH,EAAWzC,iBAAiB,SAAS,KACnC,MAAM6C,EAAW,C,MACfjB,E,YACAE,E,aACAM,E,WACAV,E,KACAG,E,GACAV,GAEF,IAAKxC,EAAWmE,KAAKH,GAGnB,OAFAhE,EAAWoE,KAAKJ,EAAa,CAACE,SAC9BG,EAAAC,OAAOC,KAAK,oBAId,MAAMC,EAAYxE,EAAWmE,KAAKH,GAClC,IAAK,MAAMV,KAAMkB,EACf,GAAIpE,KAAKC,UAAUiD,KAAQlD,KAAKC,UAAU6D,GAExC,YADAG,EAAAC,OAAOC,KAAK,8BAIhBC,EAAUjB,KAAKW,GACflE,EAAWoE,KAAKJ,EAAaQ,GAE7BH,EAAAC,OAAOC,KAAK,mBAAmB,IAGjCR,EAAU1C,iBAAiB,SAAS,KAClC,MAAM6C,EAAW,C,MACfjB,E,YACAE,E,aACAM,E,WACAV,E,KACAG,E,GACAV,GAEF,IAAKxC,EAAWmE,KAAKF,GAGnB,OAFAjE,EAAWoE,KAAKH,EAAY,CAACC,SAC7BG,EAAAC,OAAOC,KAAK,kBAId,MAAMC,EAAYxE,EAAWmE,KAAKF,GAClC,IAAK,MAAMX,KAAMkB,EACf,GAAIpE,KAAKC,UAAUiD,KAAQlD,KAAKC,UAAU6D,GAExC,YADAG,EAAAC,OAAOC,KAAK,4BAIhBC,EAAUjB,KAAKW,GACflE,EAAWoE,KAAKH,EAAYO,GAC5BH,EAAAC,OAAOC,KAAK,iBAAiB,G","sources":["src/js/modal_main.js","src/js/localStorage/storage.js"],"sourcesContent":["import { createGalleryMarkup } from './gallery';\nimport storageApi from './localStorage/storage';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst API_KEY = 'ba12bbb2efd4020faab2c5dd14dc19c0';\nconst refs = {\n  galleryRef: document.querySelector('.gallery'),\n\n  closeBtn: document.querySelector('.modal-close-btn'),\n  backdrop: document.querySelector('.backdrop'),\n  modalContainer: document.querySelector('.modal-container'),\n};\nrefs.galleryRef.addEventListener('click', onGalleryClick);\n\nlet title = null;\nlet poster_path = null;\nlet release_date = null;\nlet genresName = null;\nlet vote = null;\nlet id = null;\n\nfunction onGalleryClick(e) {\n  e.preventDefault();\n  const isMovieCard = e.target.closest('.gallery__item');\n  if (!isMovieCard) {\n    return;\n  }\n  refs.galleryRef.addEventListener('keydown', e => {\n    if (e.key === 'Escape') {\n      refs.backdrop.classList.add('is-hidden');\n    }\n  });\n  openModal(isMovieCard.id);\n  // checkWatchedAndQueued();\n}\n\n// function checkWatchedAndQueued() {\n//   const tempData = {\n//     title,\n//     poster_path,\n//     release_date,\n//     genresName,\n//     vote,\n//     id,\n//   };\n// console.log(JSON.stringify(tempData));\n// console.log(tempData);\n// const savedDataWatched = storageApi.load(WATCHED_KEY);\n// const savedDataQueued = storageApi.load(QUEUED_KEY);\n\n// console.log(localStorage.getItem('queued-films-list'));\n// console.log(JSON.stringify(tempData));\n\n// for (const el of savedDataWatched) {\n//   if (JSON.stringify(el) === localStorage.getItem('watched-films-list')) {\n//     addWatched.textContent = 'remove from watched';\n//   }\n// }\n// for (const el of savedDataQueued) {\n//   if (JSON.stringify(el) === localStorage.getItem('queued-films-list')) {\n//     addQueued.textContent = 'remove from queued';\n//   }\n// }\n// }\n\nasync function fetchDesr(movieId) {\n  const response = await fetch(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  const descriptionFilm = await response.json();\n  return descriptionFilm;\n}\n\nfunction openModal(movie) {\n  fetchDesr(movie).then(film => {\n    refs.modalContainer.innerHTML = `\n    <div id=\"${id}\" class=\"modal-img\">\n    <img src=\"https://image.tmdb.org/t/p/w500${film.poster_path}\" alt=\"${film.title} ${film.name}\" class=\"image\" />\n  </div>\n  <div class=\"modal-rest\">\n  <h3 class=\"modal-title\">${film.title}</h3>\n      <div class=\"modal-info\">\n        <div class=\"modal-description\">\n          <p class=\"info-item\">Vote / Votes</p>\n          <p class=\"info-item\">Popularity</p>\n          <p class=\"info-item\">Original Title</p>\n          <p class=\"info-item\">Genre</p>\n        </div>\n        <div class=\"modal-count\">\n          <p class=\"count\" id=\"vote\">${film.vote_average}</p>\n          <p class=\"count\">${film.popularity}</p>\n          <p class=\"count\">${film.original_title}</p>\n          <p class=\"count\">${genresName}</p>\n        </div>\n        </div>\n        <p class=\"about\">About</p>\n        <p class=\"about-info\">${film.overview}\n        </p>\n        </div>`;\n    id = film.id;\n    title = film.title;\n    vote = film.vote_average;\n    poster_path = film.poster_path;\n    const genres = [];\n    film.genres.forEach(el => {\n      genres.push(el.name);\n    });\n    genresName = genres.join(', ');\n    release_date = film.release_date.split('-')[0];\n  });\n\n  refs.backdrop.classList.remove('is-hidden');\n}\n\nwindow.addEventListener('click', e => {\n  if (e.target === refs.backdrop) {\n    refs.backdrop.classList.add('is-hidden');\n  }\n});\n\nrefs.closeBtn.addEventListener('click', () => {\n  refs.backdrop.classList.add('is-hidden');\n});\n\nconst addWatched = document.querySelector('.add-to-watch');\nconst addQueued = document.querySelector('.add-to-queue');\n// const filmTitle = document.querySelector('.modal-title');\n// const filmGenre = document.querySelector('#genre');\n// const filmPoster = document.querySelector('.image');\n// const filmVote = document.querySelector('#vote');\nconst WATCHED_KEY = 'watched-films-list';\nconst QUEUED_KEY = 'queued-films-list';\n\naddWatched.addEventListener('click', () => {\n  const tempData = {\n    title,\n    poster_path,\n    release_date,\n    genresName,\n    vote,\n    id,\n  };\n  if (!storageApi.load(WATCHED_KEY)) {\n    storageApi.save(WATCHED_KEY, [tempData]);\n    Notify.info('Added to Watched');\n    return;\n  }\n\n  const savedData = storageApi.load(WATCHED_KEY);\n  for (const el of savedData) {\n    if (JSON.stringify(el) === JSON.stringify(tempData)) {\n      Notify.info('Film is already in Watched');\n      return;\n    }\n  }\n  savedData.push(tempData);\n  storageApi.save(WATCHED_KEY, savedData);\n\n  Notify.info('Added to Watched');\n});\n\naddQueued.addEventListener('click', () => {\n  const tempData = {\n    title,\n    poster_path,\n    release_date,\n    genresName,\n    vote,\n    id,\n  };\n  if (!storageApi.load(QUEUED_KEY)) {\n    storageApi.save(QUEUED_KEY, [tempData]);\n    Notify.info('Added to Queue');\n    return;\n  }\n\n  const savedData = storageApi.load(QUEUED_KEY);\n  for (const el of savedData) {\n    if (JSON.stringify(el) === JSON.stringify(tempData)) {\n      Notify.info('Film is already in Queue');\n      return;\n    }\n  }\n  savedData.push(tempData);\n  storageApi.save(QUEUED_KEY, savedData);\n  Notify.info('Added to Queue');\n});\n","const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\nexport default {\n  save,\n  load,\n};\n"],"names":["parcelRequire","$f1fb9d3cc78adab0$export$2e2bcd8739ae039","key","value","serializedState","JSON","stringify","localStorage","setItem","error","console","message","getItem","undefined","parse","$b1b0d3f953e32163$var$refs","galleryRef","document","querySelector","closeBtn","backdrop","modalContainer","addEventListener","e","preventDefault","isMovieCard","target","closest","classList","add","movie","id","async","movieId","response","fetch","json","$b1b0d3f953e32163$var$fetchDesr","then","film","innerHTML","$b1b0d3f953e32163$var$id","poster_path","title","name","vote_average","popularity","original_title","$b1b0d3f953e32163$var$genresName","overview","$b1b0d3f953e32163$var$title","$b1b0d3f953e32163$var$vote","$b1b0d3f953e32163$var$poster_path","genres","forEach","el","push","join","$b1b0d3f953e32163$var$release_date","release_date","split","remove","window","$b1b0d3f953e32163$var$addWatched","$b1b0d3f953e32163$var$addQueued","$b1b0d3f953e32163$var$WATCHED_KEY","$b1b0d3f953e32163$var$QUEUED_KEY","tempData","load","save","$h6c0i","Notify","info","savedData"],"version":3,"file":"index.ce179f3c.js.map"}